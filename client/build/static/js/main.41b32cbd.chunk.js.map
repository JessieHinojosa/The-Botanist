{"version":3,"sources":["utils/actions.js","utils/reducers.js","utils/store.js","utils/helpers.js","components/CartItem/index.js","utils/auth.js","utils/queries.js","components/Cart/index.js","assets/hero-img.jpg","components/Hero/index.js","components/ProductItem/index.js","components/FeaturedItems/index.js","pages/Home.js","components/CategoryMenu/index.js","components/ProductList/index.js","pages/Categories.js","pages/Detail.js","utils/mutations.js","pages/Login.js","pages/Signup.js","pages/Success.js","components/AccountNav/index.js","pages/Account.js","pages/AccountDetails.js","pages/OrderHistory.js","pages/NoMatch.js","assets/icons/vector-logo.png","components/Nav/index.js","components/Dropdown/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","TOGGLE_CART","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","createStore","currentUser","composeWithDevTools","applyMiddleware","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","CartItem","item","dispatch","useDispatch","className","src","image","alt","name","price","placeholder","value","onChange","target","parseInt","role","onClick","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","stripePromise","loadStripe","Cart","useSelector","useLazyQuery","getCheckout","data","toggleCart","useEffect","a","getCart","then","res","redirectToCheckout","sessionId","checkout","session","sum","forEach","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Hero","heroImg","ProductItem","countInStock","to","itemInCart","find","cartItem","FeaturedItems","useQuery","loading","isFeatured","Home","CategoryMenu","categoryData","category","id","ProductList","Categories","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Success","addOrder","setTimeout","saveOrder","AccountNav","Account","user","AccountDetails","OrderHistory","orders","order","purchaseDate","toLocaleDateString","index","NoMatch","Nav","toggleDropdown","logo","href","logout","Dropdown","isOpen","Footer","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","setIsOpen","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41b32cbd.chunk.js","sourcesContent":["// PRODUCT CONSTANTS\nexport const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\n// CATEGORY CONSTANTS\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n// CART CONSTANTS\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';\n\n// USER LOGIN-LOGOUT CONSTANTS\nexport const USER_LOGIN = 'USER_LOGIN'\nexport const USER_LOGOUT = 'USER_LOGOUT';\n\n","import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART,\n    USER_LOGIN,\n  } from \"./actions\";\n  import { useReducer } from 'react';\n  \n  export const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products],\n        };\n         // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n      case UPDATE_CURRENT_CATEGORY:\n        return {\n            ...state,\n            currentCategory: action.currentCategory\n        };\n      case ADD_TO_CART:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: [...state.cart, action.product]\n        };\n      case ADD_MULTIPLE_TO_CART:\n        return {\n          ...state,\n          cart: [...state.cart, ...action.products],\n        };\n      case REMOVE_FROM_CART:\n          let newState = state.cart.filter(product => {\n            return product._id !== action._id;\n          });\n\n        return {\n          ...state,\n          cartOpen: newState.length > 0,\n          cart: newState\n        };\n      case UPDATE_CART_QUANTITY:\n        return {\n          ...state,\n          cartOpen: true,\n          cart: state.cart.map(product => {\n            if (action._id === product._id) {\n              product.purchaseQuantity = action.purchaseQuantity;\n            }\n            return product;\n          })\n        };\n      case CLEAR_CART:\n        return {\n          ...state,\n          cartOpen: false,\n          cart: []\n        };\n      case TOGGLE_CART:\n        return {\n          ...state,\n          cartOpen: !state.cartOpen\n        };\n      // case  USER_LOGIN: \n      //    return {},\n    \n        \n      // if it's none of these actions, do not update state at all and keep things the same!\n      default:\n        return state;\n    }\n  };\n\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }","// Create and export the Redux store\n//\nimport { applyMiddleware, createStore } from 'redux'\nimport {reducer} from './reducers'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n  currentUser: ''\n}\n\nexport default createStore(reducer, initialState, composeWithDevTools(applyMiddleware()))","export function pluralize(name, count) {\n    if (count === 1) {\n      return name\n    }\n    return name + 's'\n  }\n  \n  export function idbPromise(storeName, method, object) {\n    return new Promise((resolve, reject) => {\n      // open connection to the database `shop-shop` with the version of 1\n      const request = window.indexedDB.open('the-botanist', 1);\n  \n      // create variables to hold reference to the database, transaction (tx), and object store\n      let db, tx, store;\n  \n      // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n      request.onupgradeneeded = function(e) {\n        const db = request.result;\n        // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n        db.createObjectStore('products', { keyPath: '_id' });\n        db.createObjectStore('categories', { keyPath: '_id' });\n        db.createObjectStore('cart', { keyPath: '_id' });\n      };\n  \n      // handle any errors with connecting\n      request.onerror = function(e) {\n        console.log('There was an error');\n      };\n  \n      // on database open success\n      request.onsuccess = function(e) {\n        // save a reference of the database to the `db` variable\n        db = request.result;\n        // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n        tx = db.transaction(storeName, 'readwrite');\n        // save a reference to that object store\n        store = tx.objectStore(storeName);\n  \n        // if there's any errors, let us know\n        db.onerror = function(e) {\n          console.log('error', e);\n        };\n  \n        switch (method) {\n          case 'put':\n            store.put(object);\n            resolve(object);\n            break;\n          case 'get':\n            const all = store.getAll();\n            all.onsuccess = function() {\n              resolve(all.result);\n            };\n            break;\n          case 'delete':\n            store.delete(object._id);\n            break;\n          default:\n            console.log('No valid method');\n            break;\n        }\n  \n        // when the transaction is complete, close the connection\n        tx.oncomplete = function() {\n          db.close();\n        };\n  };\n  \n    });\n  }","import React from 'react';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch } from 'react-redux'\n\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n\n    const removeFromCart = item => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n    };\n    const onChange = (e) => {\n        const value = e.target.value;\n      \n        if (value === '0') {\n          dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n          });\n        \n          idbPromise('cart', 'delete', { ...item });\n        } else {\n          dispatch({\n            type: UPDATE_CART_QUANTITY,\n            _id: item._id,\n            purchaseQuantity: parseInt(value)\n          });\n        \n          idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n      };\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      numReviews\n      countInStock\n      image\n      category {\n        _id\n      }\n      isFeatured\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      reviews\n      numReviews\n      countInStock\n      category {\n        name\n        description\n        indoor\n        outdoor\n      }\n      isFeatured\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n      description\n      indoor\n      outdoor\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      _id\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          image\n          countInStock\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport './style.css';\n\nimport { loadStripe } from '@stripe/stripe-js';\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\n\nconst Cart = () => {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n  \n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  // Toggle cart modal open/close\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n  \n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  // CART ICON\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed \" onClick={toggleCart}>\n        {/* Heroicon Cart Icon */}\n        <div className=\"bg-yellow-400 rounded\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-10 w-10\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\" />\n        </svg>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart fixed  bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n        <h3>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>  \n  );\n};\n\nexport default Cart;","export default __webpack_public_path__ + \"static/media/hero-img.f92ad98d.jpg\";","import React from 'react'\r\nimport heroImg from '../../assets/hero-img.jpg'\r\n\r\nconst Hero = () => {\r\n    return (\r\n        <div className=\"grid grid-cols-3 pb-10\">\r\n            <div className=\"bg-gray-500 text-white font-light lg:text-4xl md:text-3xl sm:text-xl flex items-center \">\r\n                <p className=\"px-4 \">Locally and ethically sourced plants, shipped straight to your home garden.</p>\r\n            </div>\r\n            <img src={heroImg} alt=\"watering indoor houseplant\" className=\"col-span-2\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hero;\r\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useSelector, useDispatch } from 'react-redux'\n\n\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    countInStock\n  } = item;\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n  \n    return (\n    <div className=\"px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n      </Link>\n      <div className=\"grid grid-cols-3 gap-2\">\n        <p className=\"font-bold text-xl col-span-2\">{name}</p>\n        <button onClick={addToCart} className=\"bg-green-500 py-2 px-5 rounded-b-lg text-white hover:bg-green-800 focus:ring-1 focus:ring-green-800 \">Add to cart</button>\n      </div>\n      <div className=\"grid grid-cols-3 gap-2\">\n        <p>${price}</p> \n        <p>{countInStock}  in stock</p>\n      </div>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import React, {useEffect} from 'react'\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport ProductItem from '../ProductItem';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nconst FeaturedItems = () => {\n    \n    const state = useSelector(state => state);\n    const dispatch = useDispatch();\n    \n    \n    const { loading, data } = useQuery(QUERY_PRODUCTS);\n    \n    useEffect(() => {\n      console.log(data);\n      if(data) {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: data.products\n        });\n        \n        data.products.forEach((product) => {\n          idbPromise('products', 'put', product);\n        });\n        // add else if to check if `loading` is undefined in `useQuery()` Hook\n      } else if (!loading) {\n        // since we're offline, get all of the data from the `products` store\n        idbPromise('products', 'get').then((products) => {\n          // use retrieved data to set global state for offline browsing\n          dispatch({\n            type: UPDATE_PRODUCTS,\n            products: products\n          });\n        });\n      }\n    }, [data, loading, dispatch]);  \n    function filterProducts() {\n      return state.products.filter(product => product.isFeatured === true);\n    }\n      return (\n        <div className=\"px-8 pb-4 grid lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1 gap-20\">\n        {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              countInStock={product.countInStock}\n            />\n          ))}\n        </div>\n    )\n}\n\nexport default FeaturedItems\n","import React from \"react\";\nimport Cart from '../components/Cart';\nimport Hero from '../components/Hero';\nimport FeaturedItems from \"../components/FeaturedItems\";\n\nconst Home = () => {\n  return (\n  <div>\n    <Hero />\n    <Cart /> \n    <FeaturedItems />\n  </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport {useSelector, useDispatch } from 'react-redux'\n\nfunction CategoryMenu() {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n;\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      console.log(categoryData);\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    }  else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\nreturn (\n  <div className=\"flex justify-center items-center h-16 bg-green-800 relative shadow-sm font-sans\">\n    {/* add \"All plants\" to categories list */}\n    <button className=\"text-white font-semibold px-4 mx-5\">All Plants</button>\n    {categories.map(item => (\n      <button\n        key={item._id}\n        onClick={() => {\n          handleClick(item._id);\n        }}\n        className=\"text-white font-semibold px-4 mx-5\"\n      >\n        {item.name}\n      </button>\n    ))}\n    \n  </div>\n);\n}\n\nexport default CategoryMenu;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nfunction ProductList() {\n  const state = useSelector(state => state);\n  const dispatch = useDispatch();\n  \n  const { currentCategory } = state;\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);  \n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n  \n    return (\n    <div className=\"py-2\">\n      {state.products.length ? (\n        <div className=\"px-8 pb-4 grid lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1 gap-24\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              countInStock={product.countInStock}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>Looks like we're out of stock!</h3>\n      )} \n      {/* {loading ? <img src={spinner} alt=\"loading\" /> : null} */}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React from 'react'\nimport CategoryMenu from '../components/CategoryMenu'\nimport ProductList from '../components/ProductList'\n\nconst Categories = () => {\n    return (\n        <section>\n            <CategoryMenu />\n            <ProductList />\n        </section>\n    )\n}\n\nexport default Categories\n","import React, { useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport Cart from '../components/Cart';\nimport {\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    ADD_TO_CART,\n    UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from \"../utils/helpers\";\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst Detail = () => {\n    const state = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    const { id } = useParams();\n    \n    const [currentProduct, setCurrentProduct] = useState({})\n    \n    const { loading, data } = useQuery(QUERY_PRODUCTS);\n    \n    const { products, cart } = state;\n    \n    useEffect(() => {\n        // already in global store\n        if (products.length) {\n        setCurrentProduct(products.find(product => product._id === id));\n        } \n        // retrieved from server\n        else if (data) {\n        dispatch({\n            type: UPDATE_PRODUCTS,\n            products: data.products\n        });\n    \n        data.products.forEach((product) => {\n            idbPromise('products', 'put', product);\n        });\n        }\n        // get cache from idb\n        else if (!loading) {\n        idbPromise('products', 'get').then((indexedProducts) => {\n            dispatch({\n            type: UPDATE_PRODUCTS,\n            products: indexedProducts\n            });\n        });\n        }\n    }, [products, data, loading, dispatch, id]);\n\n    const addToCart = () => {\n        const itemInCart = cart.find((cartItem) => cartItem._id === id)\n    \n        if (itemInCart) {\n        dispatch({\n            type: UPDATE_CART_QUANTITY,\n            _id: id,\n            purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n        });\n        // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n        idbPromise('cart', 'put', {\n            ...itemInCart,\n            purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n        });\n        } else {\n        dispatch({\n            type: ADD_TO_CART,\n            product: { ...currentProduct, purchaseQuantity: 1 }\n        });\n        // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n        idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n        }\n    }\n\n    const removeFromCart = () => {\n        dispatch({\n        type: REMOVE_FROM_CART,\n        _id: currentProduct._id\n        });\n    \n        // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n        idbPromise('cart', 'delete', { ...currentProduct });\n    };\n\n    return (\n        <>\n            {currentProduct ? (\n                <div className=\"lg:px-60 md:px-36 sm:px-20\">\n                    {/* Sub navigation*/}\n                    <div className=\"border-b py-6 flex items-center\">\n                    <Link to=\"/categories\" className=\"text-green-700 text-lg hover:underline\">\n                        Products\n                    </Link>\n                    <span className=\"px-3\"> /</span>\n                    <span className=\"text-green-700 text-lg\">{currentProduct.name}</span>\n                    </div>\n\n                    {/* Product display*/}\n                    <div className=\"py-10 grid lg:grid-cols-2 gap-36\">\n                        <img\n                            src={`/images/${currentProduct.image}`}\n                            alt={currentProduct.name}\n                        />\n\n                        <div className=\"grid grid-cols-1\">\n                            <div className=\"flex justify-between border-b\">\n                                <h2 className=\"text-4xl\">{currentProduct.name}</h2>\n                                <p className=\"text-4xl\">${currentProduct.price}</p>\n                            </div>\n\n                            <div>\n                                <p className=\"text-xl\">{currentProduct.description}</p>\n                                <button \n                                onClick={addToCart}\n                                className=\"bg-green-500 text-white px-4 py-2 rounded-full hover:bg-green-400\"\n                                >\n                                    Add to Cart\n                                </button>\n                                <button \n                                disabled={!cart.find(p => p._id === currentProduct._id)} \n                                onClick={removeFromCart}\n                                className=\"bg-yellow-500 text-white px-4 py-2 rounded-full hover:bg-yellow-400\"\n                                >\n                                    Remove from Cart\n                                </button>\n                            </div>\n                            \n                        </div>\n\n                    </div>\n                </div>\n            ) : null}\n            {loading ? <img src=\"\" alt=\"loading\" /> : null}\n            <Cart />\n        </>\n    )\n}\n\nexport default Detail\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        countInStock\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      user {\n        _id\n      }\n      token\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n// import { Link } from 'react-router-dom';\n// import Signup from './Signup';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"\">\n      {/* remove <Signup /> component for link to signup page */}\n      {/* <Link to=\"/signup\">← Go to Signup</Link> */}\n      {/* <Signup /> */}\n    <div className=\"flex items-center justify-center h-screen bg-gray-700\">\n      <div className=\" bg-white p-14 rounded shadow-2xl lg:w-1/3 sm:w-1/2\">\n        <h2 className=\"text-3xl font-bold mb-10 text-red-700\">Login to Your Account</h2>\n\n      <form onSubmit={handleFormSubmit} className=\"space-y-6\">\n        <div>\n          <label htmlFor=\"email\" className=\"mr-2 font-medium block\">\n            Email\n            </label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n            className=\"border-2 border-gray-200 outline-none focus:border-green-500 rounded p-2 w-full\"\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"pwd\" className=\"mr-2 font-medium block\">\n            Password\n          </label>\n          <input\n            placeholder=\"********\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n            className=\"border-2 border-gray-200 outline-none focus:border-green-500 rounded p-2 w-full\"\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\" className=\"bg-green-700 text-white rounded w-full hover:bg-green-500 py-3\">Submit</button>\n        </div>\n      </form>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n    const mutationResponse = await addUser({variables:{\n      \n        firstName: formState.firstName,\n        lastName: formState.lastName,\n        email: formState.email,\n        password: formState.password,\n    \n    }});\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"\">\n    <div className=\"flex items-center justify-center h-screen bg-gray-700\">\n      <div className=\" bg-white p-14 rounded shadow-2xl lg:w-1/3 sm:w-1/2\">\n        <h2 className=\"text-3xl font-bold mb-10 text-red-700\">Create Your Account</h2>\n\n        <form onSubmit={handleFormSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"firstName\" className=\"mr-2 font-medium block\">\n              First Name \n            </label>\n            <input\n              placeholder=\" John\"\n              name=\"firstName\"\n              type=\"firstName\"\n              id=\"firstName\"\n              onChange={handleChange}\n              className=\"border-2 border-gray-200 outline-none focus:border-green-500 rounded p-2 w-full\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"lastName\" className=\"mr-2 font-medium block\">\n              Last Name\n            </label>\n            <input\n              placeholder=\" Smith\"\n              name=\"lastName\"\n              type=\"lastName\"\n              id=\"lastName\"\n              onChange={handleChange}\n              className=\"border-2 border-gray-200 outline-none focus:border-green-500 rounded p-2 w-full\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"mr-2 font-medium block\">\n              Email\n              </label>\n            <input\n              placeholder=\"johnsmith@gmail.com\"\n              name=\"email\"\n              type=\"email\"\n              id=\"email\"\n              onChange={handleChange}\n              className=\"border-2 border-gray-200 outline-none focus:border-green-500 rounded p-2 w-full\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"pwd\" className=\"mr-2 font-medium block\">\n              Password\n              </label>\n            <input\n              placeholder=\"********\"\n              name=\"password\"\n              type=\"password\"\n              id=\"pwd\"\n              onChange={handleChange}\n              className=\"border-2 border-gray-200 outline-none focus:border-green-500 rounded p-2 w-full\"\n            />\n          </div>\n\n          <div>\n            <button type=\"submit\" className=\"bg-green-700 text-white rounded w-full hover:bg-green-500 py-3\">Sign Up</button>\n          </div>\n        </form>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default Signup;","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_ORDER } from '../utils/mutations'\n// import idbPromise()\nimport { idbPromise } from \"../utils/helpers\";\n\nconst Success = () => {\n    // on Success load, read everything saved in indexedDB cart store\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n    async function saveOrder() {\n        const cart = await idbPromise('cart', 'get');\n        const products = cart.map(item => item._id);\n\n        if (products.length) {\n            const { data } = await addOrder({ variables: { products } });\n            const productData = data.addOrder.products;\n        \n            productData.forEach((item) => {\n                idbPromise('cart', 'delete', item);\n            });\n        }\n\n        // relocate to homepage after 3 seconds\n        setTimeout(() => {\n            window.location.assign('/');\n        }, 3000);\n    }\n\n    saveOrder();\n    }, [addOrder]);\n\n    return (\n        <div>\n            <h1>Success!</h1>\n            <h2>\n                Thank you for your purchase!\n            </h2>\n            <h2>\n                You will now be redirected to the homepage\n            </h2>\n        </div>\n    );\n}\n\n export default Success","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst AccountNav = () => {\r\n    return (\r\n        <div className=\"border-b py-6 flex items-center\">\r\n            <Link to=\"/account\" className=\"text-green-600 text-lg hover:underline font-medium\">\r\n                Account Dashboard\r\n            </Link>\r\n            <span className=\"px-3 text-gray-400\"> /</span>\r\n            <Link to='/orderhistory' className=\"text-green-600 text-lg hover:underline font-medium\">Order History</Link>\r\n            <span className=\"px-3 text-gray-400\"> /</span>\r\n            <Link to='/account-details' className=\"text-green-600 text-lg hover:underline font-medium\">Account Details</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountNav;\r\n","import React, { useEffect } from 'react';\n// import { Link } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nimport AccountNav from '../components/AccountNav';\n\nfunction Account() {\n    // return components for updating Account and order history\n    const { data } = useQuery(QUERY_USER);\n    let user;\n    if (data) {\n        user = data.user;\n        console.log(user);\n    }\n    return (\n        <div className=\"lg:px-60 md:px-36 sm:px-20\">\n            <AccountNav />\n        </div>\n    );\n}\n\nexport default Account;","import React from 'react'\r\nimport AccountNav from '../components/AccountNav'\r\n\r\nconst AccountDetails = () => {\r\n    return (\r\n        <div className=\"lg:px-60 md:px-36 sm:px-20\">\r\n            <AccountNav />\r\n            <h2>Account Details</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AccountDetails\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\nimport AccountNav from '../components/AccountNav';\r\n\r\nfunction OrderHistory() {\r\n    const { data } = useQuery(QUERY_USER);\r\n    let user;\r\n\r\n    if (data) {\r\n        user = data.user;\r\n    }\r\n\r\n    return (\r\n        <div className=\"lg:px-60 md:px-36 sm:px-20\">\r\n        <AccountNav />\r\n            <div className=\"container my-1\">\r\n                <Link to=\"/\">← Back to Products</Link>\r\n\r\n                {user ? (\r\n                <>\r\n                    <h2>\r\n                    Order History for {user.firstName} {user.lastName}\r\n                    </h2>\r\n                    {user.orders.map((order) => (\r\n                    <div key={order._id} className=\"my-2\">\r\n                        <h3>\r\n                        {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                        </h3>\r\n                        <div className=\"flex-row\">\r\n                        {order.products.map(({ _id, image, name, price }, index) => (\r\n                            <div key={index} className=\"card px-1 py-1\">\r\n                            <Link to={`/products/${_id}`}>\r\n                                <img alt={name} src={`/images/${image}`} />\r\n                                <p>{name}</p>\r\n                            </Link>\r\n                            <div>\r\n                                <span>${price}</span>\r\n                            </div>\r\n                            </div>\r\n                        ))}\r\n                        </div>\r\n                    </div>\r\n                    ))}\r\n                </>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderHistory;","import React from \"react\";\r\n\r\nconst NoMatch = () => {\r\n    return (\r\n        <div>\r\n            <h1>404 Page Not Found</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoMatch;\r\n","export default __webpack_public_path__ + \"static/media/vector-logo.985eb13f.png\";","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport Auth from \"../../utils/auth\";\nimport logo from '../../assets/icons/vector-logo.png'\n\n// to add animation class: \"transition duration-300 ease-in-out flex items-center animate-bounce\"\n\nconst Nav = ({toggleDropdown}) => {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <>\n          <Link to=\"/account\" className=\"py-4 px-4 text-red-800 hover:underline font-medium text-xl\">\n            Account\n          </Link>\n          {/* this is not using the Link component to logout our user and then refresh the application to the start */}\n          <a href=\"/\" onClick={() => Auth.logout()} className=\"py-4 px-4 text-red-800 hover:underline font-medium text-xl\">\n            Logout\n          </a>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Link to=\"/login\" className=\"py-4 px-4 text-red-800 hover:underline font-medium text-xl\">\n            Login\n          </Link>\n          <Link to=\"/signup\" className=\"py-4 px-4 text-red-800 hover:underline font-medium text-xl\">\n            Sign-Up\n          </Link>\n        </>\n      );\n    }\n  }\n\n  return (\n    <header className=\"sticky top-0\">\n      <nav className=\" flex justify-between items-center h-22 bg-gray-100  relative font-sans\" role=\"navigation\">\n        <Link to=\"/\" className=\"pl-24 py-2\">\n          <img src={logo} alt=\"name-logo\" />\n        </Link>\n\n        <div className='px-4 cursor-pointer md:hidden' onClick={toggleDropdown}> \n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n          </svg>\n        </div>\n\n        <div className='pr-24 md:block hidden'> \n          <Link to=\"/categories\" className=\"py-4 px-4 text-red-800 hover:underline font-medium text-xl\">Products</Link>\n          {showNavigation()}\n          {/* <Link to=\"/cart\" className=\"py-4 px-4 text-red-800 hover:underline font-medium text-xl\">Cart</Link> */}\n        </div>\n      </nav>\n    </header>\n  )\n}\n\nexport default Nav;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Dropdown = ({isOpen, toggleDropdown}) => {\n    return (\n        <div className={isOpen ? \"grid grid-rows-5 text-center items-center bg-gray-500\" : \"hidden\"} onClick={toggleDropdown}>\n            <Link to=\"categories\" className=\"py-4 px-5 text-white hover:bg-green-500\">Categories</Link>\n            <Link to=\"/cart\" className=\"py-4 px-5 text-white hover:bg-green-500\">Cart</Link>\n            <Link to=\"/login\" className=\"py-4 px-5 text-white hover:bg-green-500\">Login</Link>\n            <Link to=\"/signup\" className=\"py-4 px-5 text-white hover:bg-green-500\">Sign-Up</Link>\n            <Link to=\"/user\" className=\"py-4 px-5 text-white hover:bg-green-500\">\n                User\n            </Link>\n        </div>\n    )\n}\n\nexport default Dropdown;\n","import React from 'react'\n\nconst Footer = () => {\n    return (\n        <footer className='flex justify-center items-center h-16 bg-red-900 text-white'>\n            <span>Copyright &copy; The Botanist 2021</span>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport store from './utils/store';\nimport { Provider } from 'react-redux';\n\n\n\n// Import pages\nimport Home from './pages/Home';\nimport Categories from './pages/Categories';\nimport Detail from './pages/Detail';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Success from './pages/Success';\nimport Account from './pages/Account';\nimport AccountDetails from './pages/AccountDetails';\nimport OrderHistory from './pages/OrderHistory';\nimport NoMatch from './pages/NoMatch';\n\n// Import components\nimport Nav from './components/Nav';\nimport Dropdown from './components/Dropdown';\nimport Footer from './components/Footer/index';\n\n// Link to GraphQL\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// \nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\n// \nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\n\nfunction App() {\n  const [isOpen, setIsOpen ] = useState(false);\n\n  const toggleDropdown = () => {\n    setIsOpen(!isOpen);\n  }\n\n  return (\n    <ApolloProvider client={client} >\n    <Router>\n      <div className=\"App\">\n      <Provider store={store}>\n      <Nav toggleDropdown={toggleDropdown} />\n      <Dropdown isOpen={isOpen} toggleDropdown={toggleDropdown} />\n        <main>\n          <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/categories\" component={Categories} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/account\" component={Account} />\n              <Route exact path=\"/account-details\" component={AccountDetails} />\n              <Route exact path=\"/orderhistory\" component={OrderHistory} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n          </Switch>\n        </main>\n        <Footer />\n        </Provider>\n      </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n  );\n  \n  export function register(config) {\n    if (\n      process.env.NODE_ENV === 'production' &&\n      'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n  \n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport  {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './utils/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}